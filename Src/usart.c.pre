/**
  ******************************************************************************
  * File Name          : USART.c
  * Description        : This file provides code for the configuration
  *                      of the USART instances.
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2017 STMicroelectronics International N.V.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice,
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other
  *    contributors to this software may be used to endorse or promote products
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under
  *    this license is void and will automatically terminate your rights under
  *    this license.
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "usart.h"

#include "gpio.h"


/* USER CODE BEGIN 0 */
uint8_t cUart1, cUart3;
uint8_t indexUart1 = 0;
char UART1_RX_BUFFER[RX_BUFFER_SIZE];
char UART1_RX[RX_BUFFER_SIZE];
//uint8_t  len_UART1_BUF;
uint8_t indexUart3 = 0;
char UART3_RX_BUFFER[RX_BUFFER_SIZE];
char UART3_RX[RX_BUFFER_SIZE];
/* USER CODE END 0 */

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

extern uint8_t signalUART1;
extern uint8_t signalUART3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{

    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    
    if(HAL_UART_Init(&huart1) != HAL_OK)
    {
        _Error_Handler(__FILE__, __LINE__);
    }

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

    huart3.Instance = USART3;
    huart3.Init.BaudRate = 115200;
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
    huart3.Init.StopBits = UART_STOPBITS_1;
    huart3.Init.Parity = UART_PARITY_NONE;
    huart3.Init.Mode = UART_MODE_TX_RX;
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
    if(HAL_UART_Init(&huart3) != HAL_OK)
    {
        _Error_Handler(__FILE__, __LINE__);
    }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

    GPIO_InitTypeDef GPIO_InitStruct;
    if(uartHandle->Instance==USART1)
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_9;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

        GPIO_InitStruct.Pin = GPIO_PIN_10;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

        /* USER CODE BEGIN USART1_MspInit 1 */
        HAL_NVIC_SetPriority(USART1_IRQn, 2, 1);
        HAL_NVIC_EnableIRQ(USART1_IRQn);
        /* USER CODE END USART1_MspInit 1 */
    }
    else if(uartHandle->Instance==USART3)
    {
        /* USER CODE BEGIN USART3_MspInit 0 */

        /* USER CODE END USART3_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_USART3_CLK_ENABLE();

        /**USART3 GPIO Configuration
        PB10     ------> USART3_TX
        PB11     ------> USART3_RX
        */
        GPIO_InitStruct.Pin = GPIO_PIN_10;
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

        GPIO_InitStruct.Pin = GPIO_PIN_11;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

        /* USER CODE BEGIN USART3_MspInit 1 */
        HAL_NVIC_SetPriority(USART3_IRQn, 3, 1);
        HAL_NVIC_EnableIRQ(USART3_IRQn);
        /* USER CODE END USART3_MspInit 1 */
    }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

    if(uartHandle->Instance==USART1)
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);

        /* USER CODE BEGIN USART1_MspDeInit 1 */
        HAL_NVIC_DisableIRQ(USART1_IRQn);
        /* USER CODE END USART1_MspDeInit 1 */
    }
    else if(uartHandle->Instance==USART3)
    {
        /* USER CODE BEGIN USART3_MspDeInit 0 */

        /* USER CODE END USART3_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART3_CLK_DISABLE();

        /**USART3 GPIO Configuration
        PB10     ------> USART3_TX
        PB11     ------> USART3_RX
        */
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);

        /* USER CODE BEGIN USART3_MspDeInit 1 */
        HAL_NVIC_DisableIRQ(USART3_IRQn);
        /* USER CODE END USART3_MspDeInit 1 */
    }
}

/* USER CODE BEGIN 1 */
// printf initialization
PUTCHAR_PROTOTYPE
{
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of
    transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x100);

    return ch;
}

void UART1_Transmit(char *str, uint16_t len){

    uint16_t i;
    uint8_t ch;

    for(i=0; i< len; i++){
        ch = str[i];

        HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0x100);
    }

}

void  UART1_receive()
{

    uint8_t ret;

    do
    {
        ret = HAL_UART_Receive_IT(&huart1, (uint8_t *)&cUart1, 1);

        if( ret == HAL_ERROR || ret == HAL_BUSY){
            
            //break;
            // reset the UART
            
        }

    }
    while(ret != HAL_OK);

}
void  UART3_receive()
{

    uint8_t ret;

    do
    {
        ret = HAL_UART_Receive_IT(&huart3, (uint8_t *)&cUart3, 1);

    }
    while(ret != HAL_OK);

}

/* USER CODE END 1 */
void UART1_Handle_Byte(uint8_t c)
{
    uint8_t i;

    if(signalUART1 == True){
        return;
    }

    Buzzer_Toggle();

    if((c == '\n'|| c== '\r') && indexUart1< 1)
    {
        indexUart1= 0;
    }
    else if(c == '\n' || c == '\r')
    {
        if(UART1_RX_BUFFER[ indexUart1-1] == '\r' ||
           UART1_RX_BUFFER[ indexUart1-1] == '\n')
        {
            indexUart1--;
        }

        UART1_RX_BUFFER[ indexUart1] = '\0';

        for( i=0 ; i< RX_BUFFER_SIZE; i++){

            UART1_RX[i] = UART1_RX_BUFFER[i];

            if(UART1_RX[i] == '\0'){
                break;
            }
        }
        
        signalUART1 = True;
        
        indexUart1 = 0;
    }
    else if(indexUart1== RX_BUFFER_SIZE-2)
    {
        UART1_RX_BUFFER[indexUart1++] = c;

        UART1_RX_BUFFER[ indexUart1] = '\0';

        indexUart1 = 0;
    }
    else if(c >=20 && c <= 126)
    {
        UART1_RX_BUFFER[indexUart1++] = c;
    }else{
        indexUart1 = 0;
    }


}
void UART3_Handle_Byte(uint8_t c)
{

if((c == '\n'|| c== '\r') && indexUart1< 1)
    {
        indexUart1= 0;
    }
    else if(c == '\n' || c == '\r')
    {
        if(UART1_RX_BUFFER[ indexUart1-1] == '\r' ||
           UART1_RX_BUFFER[ indexUart1-1] == '\n')
        {
            indexUart1--;
        }

        UART1_RX_BUFFER[ indexUart1] = '\0';

        for( i=0 ; i< RX_BUFFER_SIZE; i++){

            UART1_RX[i] = UART1_RX_BUFFER[i];

            if(UART1_RX[i] == '\0'){
                break;
            }
        }
        
        signalUART1 = True;
        
        indexUart1 = 0;
    }
    else if(indexUart1== RX_BUFFER_SIZE-2)
    {
        UART1_RX_BUFFER[indexUart1++] = c;

        UART1_RX_BUFFER[ indexUart1] = '\0';

        indexUart1 = 0;
    }
    else if(c >=20 && c <= 126)
    {
        UART1_RX_BUFFER[indexUart1++] = c;
    }else{
        indexUart1 = 0;
    }
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{


    // uart log
    if(UartHandle->Instance==USART1)
    {
        UART1_Handle_Byte(cUart1);
        UART1_receive();

    }
    // uart hmi
    else if(UartHandle->Instance==USART3)
    {
        UART3_Handle_Byte(cUart3);
        UART3_receive();
    }

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
    // uart log
    if(huart->Instance==USART1)
    {


    }
    // uart hmi
    else if(huart->Instance==USART3)
    {

    }


}

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
